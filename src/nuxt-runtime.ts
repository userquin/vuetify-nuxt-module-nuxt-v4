import type { Nuxt } from '@nuxt/schema'
import type { VuetifyNuxtContext } from './context'
import { addPlugin, addPluginTemplate } from '@nuxt/kit'
import { CONFIG_KEY } from './context'
import { registerIconFonts } from './icons'

export async function prepareNuxtRuntime(
  nuxt: Nuxt,
  ctx: VuetifyNuxtContext,
) {
  const runtimeDir = ctx.resolver.resolve('./runtime')

  // disable inline styles when SSR enabled
  if (ctx.isSSR && typeof ctx.moduleOptions.styles?.mode === 'object') {
    nuxt.options.features.inlineStyles = false
  }

  // transpile always vuetify and runtime folder
  nuxt.options.build.transpile.push(CONFIG_KEY)
  nuxt.options.build.transpile.push(runtimeDir)
  nuxt.options.build.transpile.push(/^#build\/vuetify\//)

  if (typeof ctx.moduleOptions.styles?.mode === 'undefined' || ctx.moduleOptions.styles.mode === true) {
    nuxt.options.css ??= []
    // always add vuetify/styles
    nuxt.options.css.unshift('vuetify/styles')
  }

  registerIconFonts(nuxt, ctx.icons)

  nuxt.hook('prepare:types', ({ nodeReferences, references }) => {
    nodeReferences.push({ types: 'vuetify-nuxt-module/custom-configuration' })
    if (ctx.enableRules) {
      nodeReferences.push({ types: `vuetify-nuxt-module/custom-${ctx.rulesConfiguration.fromLabs ? 'labs-' : ''}rules-configuration` })
    }
    references.push({ path: ctx.resolver.resolve(runtimeDir, 'plugins/types') })
  })

  if (ctx.i18n) {
    addPlugin({
      src: ctx.resolver.resolve(runtimeDir, 'plugins/vuetify-i18n'),
    })
  }

  if (ctx.ssrClientHints.enabled) {
    addPlugin({
      src: ctx.resolver.resolve(runtimeDir, 'plugins/vuetify-client-hints.client'),
      mode: 'client',
    })
    addPlugin({
      src: ctx.resolver.resolve(runtimeDir, 'plugins/vuetify-client-hints.server'),
      mode: 'server',
    })
  }
  else {
    addPlugin({
      src: ctx.resolver.resolve(runtimeDir, 'plugins/vuetify-no-client-hints'),
    })
  }

  addVuetifyNuxtPlugins(ctx)
}

function addVuetifyNuxtPlugin(
  ctx: VuetifyNuxtContext,
  mode: 'client' | 'server',
) {
  addPluginTemplate({
    filename: `vuetify/plugins/main.${mode}.mjs`,
    name: `vuetify:nuxt:${mode}:plugin`,
    write: true,
    mode,
    getContents() {
      const dependsOn = [] as import('#app').NuxtAppLiterals['pluginName'][]
      if (ctx.i18n) {
        // @ts-expect-error missing at build time
        dependsOn.push('vuetify:i18n:plugin')
      }
      if (ctx.ssrClientHints.enabled) {
        if (mode === 'client')
          // @ts-expect-error missing at build time
          dependsOn.push('vuetify:client-hints:client:plugin')
        else
          // @ts-expect-error missing at build time
          dependsOn.push('vuetify:client-hints:server:plugin')
      }
      else {
        // @ts-expect-error missing at build time
        dependsOn.push('vuetify:no-client-hints:plugin')
      }

      let rulesImports = ''
      let rulesPlugin = ''
      if (mode === 'client' && ctx.enableRules) {
        rulesImports = [
          '',
          `import { rulesOptions } from '#build/vuetify/rules-configuration.mjs'`,
          `import { createRulesPlugin } from 'vuetify/${ctx.rulesConfiguration.fromLabs ? 'labs/' : ''}rules'`,
        ].join('\n')
        rulesPlugin = [
          '',
          '    nuxtApp.vueApp.use(createRulesPlugin(rulesOptions, vuetify.locale))',
        ].join('\n')
      }

      return `// Generated by vuetify-nuxt-module
import { defineNuxtPlugin } from '#imports'
import { vuetifyConfiguration } from '#build/vuetify/configuration.mjs'
import { createVuetify } from 'vuetify'${rulesImports}

export default defineNuxtPlugin({
  name: 'vuetify:nuxt:${mode}:plugin',
  order: 25,
  dependsOn: ${JSON.stringify(dependsOn)},
  parallel: true,
  async setup(nuxtApp) {
    const vuetifyOptions = vuetifyConfiguration()
    await nuxtApp.hooks.callHook('vuetify:configuration', { vuetifyOptions })
    await nuxtApp.hooks.callHook('vuetify:before-create', { vuetifyOptions })
    const vuetify = createVuetify(vuetifyOptions)
    nuxtApp.vueApp.use(vuetify)${rulesPlugin}
    nuxtApp.provide('vuetify', vuetify)
    await nuxtApp.hooks.callHook('vuetify:ready', vuetify)
    if (import.meta.client && import.meta.dev)
      console.log('Vuetify 3 initialized', vuetify)
  },
})
`
    },
  })
}

function addVuetifyNuxtPlugins(
  ctx: VuetifyNuxtContext,
) {
  addVuetifyNuxtPlugin(ctx, 'client')
  addVuetifyNuxtPlugin(ctx, 'server')
}
