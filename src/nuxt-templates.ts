import type { Nuxt } from '@nuxt/schema'
import type { VuetifyNuxtContext } from './context'
import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import { generateCode } from 'magicast'
import { buildVuetifyClientHintsConfiguration, SSRClientHintsConfigurationDefinition } from './ssr-client-hints'
import { resolveUnoCSSIcons } from './icons'

export async function addVuetifyNuxtTemplates(
  nuxt: Nuxt,
  ctx: VuetifyNuxtContext,
  fromWatcher = false,
) {
  if (ctx.tsdownEnabled) {
    await import('./nuxt-tsdown-templates').then(({ generateTSDownNuxtTemplates }) => generateTSDownNuxtTemplates(nuxt, ctx, fromWatcher))
  }
  else {
    registerTemplates(ctx)
  }
}

function registerTemplates(ctx: VuetifyNuxtContext) {
  addTypeTemplate({
    filename: 'vuetify/configuration.d.ts',
    write: true,
    getContents: () => {
      return `// Generated by vuetify-nuxt-module
declare module '#vuetify/configuration.mjs' {
  import type { VuetifyOptions } from 'vuetify'

  export type { VuetifyOptions }
  export function vuetifyConfiguration(): VuetifyOptions
}
`
    },
  }, { shared: true })
  addTemplate({
    filename: 'vuetify/configuration.mjs',
    write: true,
    getContents: () => generateVuetifyConfiguration(ctx),
  })
  if (ctx.ssrClientHints.enabled) {
    addTypeTemplate({
      filename: 'vuetify/ssr-client-hints-configuration.d.ts',
      write: true,
      getContents: () => `// Generated by vuetify-nuxt-module
declare module '#vuetify/ssr-client-hints-configuration.mjs' {
  ${SSRClientHintsConfigurationDefinition}

  export const ssrClientHintsConfiguration: SSRClientHintsConfiguration
}
`,
    }, { shared: true })
    addTemplate({
      filename: 'vuetify/ssr-client-hints-configuration.mjs',
      write: true,
      getContents: () => generateVuetifyClientHintsConfiguration(ctx),
    })
  }
  if (ctx.enableRules) {
    const fromLabs = ctx.rulesConfiguration.fromLabs
    addTypeTemplate({
      filename: `vuetify/rules-configuration.d.ts`,
      write: true,
      getContents: () => `// Generated by vuetify-nuxt-module
declare module '#vuetify/rules-configuration.mjs' {
  import type { RulesOptions } from 'vuetify/${fromLabs ? 'labs/' : ''}rules'

  export type { RulesOptions }

  export const rulesOptions: RulesOptions
}
`,
    })
    addTemplate({
      filename: `vuetify/rules-configuration.mjs`,
      write: true,
      getContents: () => generateRulesConfiguration(ctx),
    })
  }
  const unocss = ctx.icons.unocss
  if (unocss) {
    const icons = resolveUnoCSSIcons(ctx.icons)
    addTypeTemplate({
      write: true,
      filename: 'vuetify/iconsets/unocss.d.ts',
      getContents: () => `// Generated by vuetify-nuxt-module
declare module '#build/vuetify/iconsets/unocss.mjs' {
  import type { IconAliases } from "vuetify/framework";
  declare const aliases: IconAliases;
  declare const defaultSet: string;
  declare const unocss: IconSet;

  export { aliases, defaultSet, unocss };
}
`,
    })

    addTemplate({
      write: true,
      filename: 'vuetify/iconsets/unocss.mjs',
      getContents: () => `// @unocss-include
// Generated by vuetify-nuxt-module
import { VClassIcon } from 'vuetify/lib/composables/icons';
import { h } from '#imports';

const aliases = ${JSON.stringify(icons, null, 2)};
const defaultSet = 'unocss';
const unocss = {
  component: props => h(VClassIcon, {
    ...props,
    class: 'mdi'
  })
};
export { aliases, defaultSet, unocss };
`,
    })
  }
}

function generateRulesConfiguration(ctx: VuetifyNuxtContext) {
  return `${ctx.rulesConfiguration.imports}
export const rulesOptions = ${generateCode(ctx.rulesConfiguration.rulesOptions).code}
`
}

function generateVuetifyConfiguration(ctx: VuetifyNuxtContext) {
  return `${ctx.configurationImports}
export function vuetifyConfiguration() {
  return ${generateCode(ctx.vuetifyOptions).code}
}
`
}

function generateVuetifyClientHintsConfiguration(ctx: VuetifyNuxtContext) {
  return `export const ssrClientHintsConfiguration = JSON.parse('${JSON.stringify(buildVuetifyClientHintsConfiguration(ctx))}');`
}
