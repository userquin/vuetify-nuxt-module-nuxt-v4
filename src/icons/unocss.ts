import type { ResolvedIcons } from './types'
import { addTemplate, addTypeTemplate } from '@nuxt/kit'

export function prepareUnoCSSIconSet(
  options: ResolvedIcons,
) {
  if (!options.enabled) {
    return
  }

  const icons = resolveIcons(options)

  addTypeTemplate({
    write: true,
    filename: 'vuetify/iconsets/unocss.d.ts',
    getContents: () => `// Generated by vuetify-nuxt-module
declare module '#build/vuetify/iconsets/unocss.mjs' {
  import type { IconAliases } from "vuetify/framework";
  declare const aliases: IconAliases;
  declare const defaultSet: string;
  declare const unocss: IconSet;

  export { aliases, defaultSet, unocss };
}
`,
  })

  addTemplate({
    write: true,
    filename: 'vuetify/iconsets/unocss.mjs',
    getContents: () => `// @unocss-include
// Generated by vuetify-nuxt-module
import { VClassIcon } from 'vuetify/lib/composables/icons';
import { h } from '#imports';

const aliases = ${JSON.stringify(icons, null, 2)};
const defaultSet = 'unocss';
const unocss = {
  component: props => h(VClassIcon, {
    ...props,
    class: 'mdi'
  })
};
export { aliases, defaultSet, unocss };
`,
  })
}

function resolveIcons(
  options: ResolvedIcons,
) {
  const {
    unocssIconPrefix: prefix,
    unocssIconCollection: collection,
    unocssIcons: icons,
    unocssAdditionalIcons: additionalIcons,
  } = options

  const usePrefix = `${prefix.endsWith('-') ? prefix : `${prefix}-`}${collection}`

  const useIcons: import('vuetify/framework').IconAliases = {
    ...additionalIcons,
    collapse: `${usePrefix}:chevron-up`,
    complete: `${usePrefix}:check`,
    cancel: `${usePrefix}:close-circle`,
    close: `${usePrefix}:close`,
    // delete (e.g. v-chip close)
    delete: `${usePrefix}:close-circle`,
    clear: `${usePrefix}:close-circle`,
    success: `${usePrefix}:check-circle`,
    info: `${usePrefix}:information`,
    warning: `${usePrefix}:alert-circle`,
    error: `${usePrefix}:close-circle`,
    prev: `${usePrefix}:chevron-left`,
    next: `${usePrefix}:chevron-right`,
    checkboxOn: `${usePrefix}:checkbox-marked`,
    checkboxOff: `${usePrefix}:checkbox-blank-outline`,
    checkboxIndeterminate: `${usePrefix}:minus-box`,
    delimiter: `${usePrefix}:circle`,
    // for carousel
    sortAsc: `${usePrefix}:arrow-up`,
    sortDesc: `${usePrefix}:arrow-down`,
    expand: `${usePrefix}:chevron-down`,
    menu: `${usePrefix}:menu`,
    subgroup: `${usePrefix}:menu-down`,
    dropdown: `${usePrefix}:menu-down`,
    radioOn: `${usePrefix}:radiobox-marked`,
    radioOff: `${usePrefix}:radiobox-blank`,
    edit: `${usePrefix}:pencil`,
    ratingEmpty: `${usePrefix}:star-outline`,
    ratingFull: `${usePrefix}:star`,
    ratingHalf: `${usePrefix}:star-half-full`,
    loading: `${usePrefix}:cached`,
    first: `${usePrefix}:page-first`,
    last: `${usePrefix}:page-last`,
    unfold: `${usePrefix}:unfold-more-horizontal`,
    file: `${usePrefix}:paperclip`,
    plus: `${usePrefix}:plus`,
    minus: `${usePrefix}:minus`,
    calendar: `${usePrefix}:calendar`,
    treeviewCollapse: `${usePrefix}:menu-down`,
    treeviewExpand: `${usePrefix}:menu-right`,
    tableGroupCollapse: `${usePrefix}:chevron-down`,
    tableGroupExpand: `${usePrefix}:chevron-right`,
    eyeDropper: `${usePrefix}:eyedropper`,
    upload: `${usePrefix}:cloud-upload`,
    color: `${usePrefix}:palette`,
    command: `${usePrefix}:apple-keyboard-command`,
    ctrl: `${usePrefix}:apple-keyboard-control`,
    space: `${usePrefix}:keyboard-space`,
    shift: `${usePrefix}:apple-keyboard-shift`,
    alt: `${usePrefix}:apple-keyboard-option`,
    enter: `${usePrefix}:keyboard-return`,
    arrowup: `${usePrefix}:arrow-up`,
    arrowdown: `${usePrefix}:arrow-down`,
    arrowleft: `${usePrefix}:arrow-left`,
    arrowright: `${usePrefix}:arrow-right`,
    backspace: `${usePrefix}:backspace`,
    play: `${usePrefix}:play`,
    pause: `${usePrefix}:pause`,
    fullscreen: `${usePrefix}:fullscreen`,
    fullscreenExit: `${usePrefix}:fullscreen-exit`,
    volumeHigh: `${usePrefix}:volume-high`,
    volumeMedium: `${usePrefix}:volume-medium`,
    volumeLow: `${usePrefix}:volume-low`,
    volumeOff: `${usePrefix}:volume-variant-off`,
  }

  if (icons) {
    for (const [key, value] of Object.entries(icons)) {
      if (!(key in useIcons))
        continue
      let icon = value.startsWith(usePrefix) ? value.slice(usePrefix.length) : value
      if (icon[0] === '-' || icon[0] === ':') {
        icon = icon.slice(1)
      }
      useIcons[key as keyof typeof useIcons] = `${usePrefix}:${icon}`
    }
  }

  return useIcons
}
