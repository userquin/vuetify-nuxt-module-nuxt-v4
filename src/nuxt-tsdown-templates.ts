import { build } from 'tsdown'
import { dirname, resolve } from 'pathe'
import type { Nuxt } from '@nuxt/schema'
import PluginAlias from '@rollup/plugin-alias'
import type { Alias } from '@rollup/plugin-alias'
import type { VuetifyNuxtContext } from './context'
import * as fsPromises from 'node:fs/promises'
import { generateCode } from 'magicast'
import { buildVuetifyClientHintsConfiguration, SSRClientHintsConfigurationDefinition } from './ssr-client-hints'
import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import { resolveUnoCSSIcons } from './icons'

export async function generateTSDownNuxtTemplates(
  nuxt: Nuxt,
  ctx: VuetifyNuxtContext,
  fromWatcher: boolean,
): Promise<void> {
  const cwd = nuxt.options.buildDir
  const buildDir = resolve(cwd, 'vuetify')
  const vuetifyOptionsFile = resolve(buildDir, `${TEMPLATE_NAMES.options[2]}temp-vuetify-options.ts`)
  const vuetifyRulesFile = resolve(buildDir, `${TEMPLATE_NAMES.rules[2]}temp-vuetify-rules.ts`)
  const vuetifySSRFile = resolve(buildDir, `${TEMPLATE_NAMES.ssr[2]}temp-vuetify-ssr.ts`)
  const vuetifyUnoCSSFile = resolve(buildDir, `${TEMPLATE_NAMES.unocss[2]}temp-vuetify-unocss.ts`)
  const entry = [
    // set first unocss so its types are available when building options
    ctx.icons.unocss ? vuetifyUnoCSSFile : undefined,
    vuetifyOptionsFile,
    ctx.enableRules ? vuetifyRulesFile : undefined,
    ctx.ssrClientHints.enabled ? vuetifySSRFile : undefined,
  ].filter(Boolean) as string[]

  await fsPromises.mkdir(buildDir, { recursive: true })

  await Promise.all([
    generateTempVuetifyOptions(vuetifyOptionsFile, ctx),
    generateTempVuetifyRules(vuetifyRulesFile, ctx),
    generateTempVuetifySSR(vuetifySSRFile, ctx),
    generateTempVuetifyUnoCSS(vuetifyUnoCSSFile, ctx),
  ])

  const entries = [...collectPluginEntries(ctx)]

  console.time('vuetify:tsdown')
  await build({
    cwd,
    tsconfig: resolve(nuxt.options.rootDir, './tsconfig.json'),
    outDir: buildDir,
    format: 'esm',
    clean: false,
    entry,
    dts: {
      compilerOptions: {
        paths: {
          '#build/vuetify/iconsets/unocss.mjs': [resolve(buildDir, `${TEMPLATE_NAMES.unocss[2]}/unocss.d.ts`)],
        },
      },
    },
    banner: `// Generated by vuetify-nuxt-module`,
    external: [
      /.*/, // everything is external
    ],
    plugins: [
      PluginAlias({
        entries: entries.map(e => e[0]).concat({
          find: '#build/vuetify/iconsets/unocss.mjs',
          replacement: resolve(buildDir, `${TEMPLATE_NAMES.unocss[2]}/unocss.mjs`),
        }),
      }),
    ],
    hooks: {
      'build:done': async () => {
        await Promise.all([
          prepareVuetifyTemplates(ctx, 'options', true, !fromWatcher, buildDir),
          prepareVuetifyTemplates(ctx, 'rules', ctx.enableRules, !fromWatcher, buildDir),
          prepareVuetifyTemplates(ctx, 'ssr', ctx.ssrClientHints.enabled, !fromWatcher, buildDir),
          prepareVuetifyTemplates(ctx, 'unocss', !!ctx.icons.unocss, !fromWatcher, buildDir),
        ])
        console.timeEnd('vuetify:tsdown')
      },
    },
  })
}

function* collectPluginEntries(ctx: VuetifyNuxtContext): Generator<[
  alias: Alias,
  external: string | RegExp,
], undefined, void> {
  for (const { local, relative, filePathWithExtension, relativePath } of ctx.imports.values()) {
    if (relative && filePathWithExtension) {
      yield [{
        find: local,
        replacement: filePathWithExtension,
      }, relativePath!] as const
    }
  }
  if (ctx.enableRules) {
    for (const { local, relative, filePathWithExtension, relativePath } of ctx.rulesConfiguration.rulesImports.values()) {
      if (relative && filePathWithExtension) {
        yield [{
          find: local,
          replacement: filePathWithExtension,
        }, relativePath!] as const
      }
    }
  }
}

type TemplateContext = {
  nitro?: boolean
  nuxt?: boolean
  node?: boolean
  shared?: boolean
}
const TEMPLATE_NAMES = {
  unocss: ['unocss.mjs', 'unocss.d.ts', 'iconsets/', { shared: true } as TemplateContext],
  options: ['configuration.mjs', 'configuration.d.ts', '', { shared: true } as TemplateContext],
  rules: ['rules-configuration.mjs', 'rules-configuration.d.ts', '', { nuxt: true } as TemplateContext],
  ssr: ['ssr-client-hints-configuration.mjs', 'ssr-client-hints-configuration.d.ts', '', { shared: true } as TemplateContext],
} as const

async function prepareVuetifyTemplates(
  ctx: VuetifyNuxtContext,
  templateName: 'options' | 'rules' | 'ssr' | 'unocss',
  isEnabled: boolean,
  registerTemplate: boolean,
  vuetifyDir: string,
) {
  if (!isEnabled) {
    if (ctx.virtualModules[templateName]) {
      ctx.virtualModules[templateName] = { js: '', dts: '' }
    }
    return
  }

  const prefix = TEMPLATE_NAMES[templateName][2]

  const files = [
    resolve(vuetifyDir, `${prefix}temp-vuetify-${templateName}.js`),
    resolve(vuetifyDir, `${prefix}temp-vuetify-${templateName}.d.ts`),
  ]

  const [js, dts] = await Promise.all(files.map(file => fsPromises.readFile(file, 'utf-8')))

  ctx.virtualModules[templateName] = {
    js: js!.replace(new RegExp(`//#region .*${templateName}.ts`), '').replace('//#endregion', ''),
    dts: dts!.replace(new RegExp(`//#region .*${templateName}.d.ts`), '').replace('//#endregion', ''),
  }

  if (registerTemplate) {
    addTypeTemplate({
      filename: `vuetify/${prefix}${TEMPLATE_NAMES[templateName][1]}`,
      write: true,
      getContents: () => ctx.virtualModules[templateName].dts,
    }, TEMPLATE_NAMES[templateName][3])
    addTemplate({
      filename: `vuetify/${prefix}${TEMPLATE_NAMES[templateName][0]}`,
      write: true,
      getContents: () => {
        const content = ctx.virtualModules[templateName].js
        return templateName === 'unocss'
          ? `// @unocss-include\n${content}`
          : content
      },
    })
  }
  else {
    const dts = ctx.virtualModules[templateName]['dts']
    const js = ctx.virtualModules[templateName]['js']
    const files = [TEMPLATE_NAMES[templateName][0], TEMPLATE_NAMES[templateName][1]]
    await Promise.all(files.map(async (file) => {
      await fsPromises.mkdir(dirname(file), { recursive: true })
      let content
      if (file.endsWith('.d.ts')) {
        content = dts
      }
      else {
        content = js
        if (templateName === 'unocss' && !content.startsWith('// @unocss-include')) {
          content = `// @unocss-include\n${content}`
        }
      }
      await fsPromises.writeFile(
        resolve(vuetifyDir, `${prefix}${file}`),
        content,
        { encoding: 'utf-8' },
      )
    }))
  }

  await Promise.all([
    ...files,
    resolve(
      vuetifyDir,
      `${prefix}temp-vuetify-${templateName}.ts`,
    ),
  ].map(file => fsPromises.rm(file, { force: true })))
}

async function generateTempVuetifyOptions(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  await fsPromises.writeFile(
    path,
    `${ctx.configurationImports}

const vuetifyOptions = ${generateCode(ctx.vuetifyOptions).code} as const
export function vuetifyConfiguration() {
  return vuetifyOptions
}
`, { encoding: 'utf-8' },
  )
}

async function generateTempVuetifyRules(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  if (!ctx.enableRules) {
    await fsPromises.rm(path, { force: true })
    return
  }

  await fsPromises.writeFile(
    path,
    `${ctx.rulesConfiguration.imports}
const rulesOptions = ${generateCode(ctx.rulesConfiguration.rulesOptions).code} as const
export { rulesOptions }
`, { encoding: 'utf-8' },
  )
}

async function generateTempVuetifySSR(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  if (!ctx.ssrClientHints.enabled) {
    await fsPromises.rm(path, { force: true })
    return
  }

  await fsPromises.writeFile(
    path,
    `${SSRClientHintsConfigurationDefinition}
export const ssrClientHintsConfiguration = ${JSON.stringify(buildVuetifyClientHintsConfiguration(ctx))} as const
`, { encoding: 'utf-8' },
  )
}

async function generateTempVuetifyUnoCSS(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  const unocss = ctx.icons.unocss
  if (!unocss) {
    await fsPromises.rm(path, { force: true })
    return
  }
  await fsPromises.mkdir(dirname(path), { recursive: true })
  await fsPromises.writeFile(
    path,
    `// Generated by vuetify-nuxt-module
import type { IconSet } from 'vuetify'
import { VClassIcon } from 'vuetify/lib/composables/icons'
import { h } from '#imports'

const aliases = ${JSON.stringify(resolveUnoCSSIcons(ctx.icons), null, 2)} as const
const defaultSet = 'unocss' as const
const unocss: IconSet = {
  component: props => h(VClassIcon, {
    ...props,
    class: 'mdi'
  })
}
export { aliases, defaultSet, unocss }
`,
    { encoding: 'utf-8' },
  )
}
