import { build } from 'tsdown'
import { resolve } from 'pathe'
import type { Nuxt } from '@nuxt/schema'
import PluginAlias from '@rollup/plugin-alias'
import type { Alias } from '@rollup/plugin-alias'
import type { VuetifyNuxtContext } from './context'
import * as fsPromises from 'node:fs/promises'
import { generateCode } from 'magicast'
import { buildVuetifyClientHintsConfiguration, SSRClientHintsConfigurationDefinition } from './ssr-client-hints'
import { addTemplate, addTypeTemplate } from '@nuxt/kit'

export async function generateTSDownNuxtTemplates(
  nuxt: Nuxt,
  ctx: VuetifyNuxtContext,
): Promise<void> {
  const cwd = nuxt.options.buildDir
  const buildDir = resolve(cwd, 'vuetify')
  const vuetifyOptionsFile = resolve(buildDir, 'temp-vuetify-options.ts')
  const vuetifyRulesFile = resolve(buildDir, 'temp-vuetify-rules.ts')
  const vuetifySSRFile = resolve(buildDir, 'temp-vuetify-ssr.ts')
  const entry = [
    vuetifyOptionsFile,
    ctx.enableRules ? vuetifyRulesFile : undefined,
    ctx.ssrClientHints.enabled ? vuetifySSRFile : undefined,
  ].filter(Boolean) as string[]

  await fsPromises.mkdir(buildDir, { recursive: true })

  await Promise.all([
    generateTempVuetifyOptions(vuetifyOptionsFile, ctx),
    generateTempVuetifyRules(vuetifyRulesFile, ctx),
    generateTempVuetifySSR(vuetifySSRFile, ctx),
  ])

  const entries = [...collectPluginEntries(ctx)]

  await build({
    cwd,
    tsconfig: resolve(nuxt.options.rootDir, './tsconfig.json'),
    outDir: buildDir,
    format: 'esm',
    clean: false,
    entry,
    dts: true,
    banner: `// Generated by vuetify-nuxt-module`,
    external: entries.map(e => e[1]).concat(
      /^#build\//,
      /^#imports\//,
      'vue',
      'vuetify',
      /^vuetify\//,
    ),
    plugins: [PluginAlias({ entries: entries.map(e => e[0]) })],
  })

  await Promise.all([
    prepareVuetifyOptionsTemplates(buildDir),
    prepareVuetifyRulesTemplates(buildDir, ctx),
    prepareVuetifySSRTemplates(buildDir, ctx),
  ])
}

function* collectPluginEntries(ctx: VuetifyNuxtContext): Generator<[
  alias: Alias,
  external: string | RegExp,
], undefined, void> {
  for (const { local, relative, filePathWithExtension, relativePath } of ctx.imports.values()) {
    if (relative && filePathWithExtension) {
      yield [{
        find: local,
        replacement: filePathWithExtension,
      }, relativePath!] as const
    }
  }
  if (ctx.enableRules) {
    for (const { local, relative, filePathWithExtension, relativePath } of ctx.rulesConfiguration.rulesImports.values()) {
      if (relative && filePathWithExtension) {
        yield [{
          find: local,
          replacement: filePathWithExtension,
        }, relativePath!] as const
      }
    }
  }
}

async function prepareVuetifyOptionsTemplates(
  vuetifyDir: string,
) {
  const files = [
    resolve(vuetifyDir, 'temp-vuetify-options.js'),
    resolve(vuetifyDir, 'temp-vuetify-options.d.ts'),
  ]
  const [js, dts] = await Promise.all(files.map(file => fsPromises.readFile(
    file,
    { encoding: 'utf-8' },
  )))

  addTypeTemplate({
    filename: 'vuetify/configuration.d.ts',
    write: true,
    getContents: () => dts!.replace('//#region vuetify/temp-vuetify-options.d.ts', '').replace('//#endregion', ''),
  }, { shared: true })
  addTemplate({
    filename: 'vuetify/configuration.mjs',
    write: true,
    getContents: () => js!.replace('//#region vuetify/temp-vuetify-options.ts', '').replace('//#endregion', ''),
  })

  files.push(resolve(vuetifyDir, 'temp-vuetify-options.ts'))

  await Promise.all(files.map(file => fsPromises.rm(
    file,
    { force: true },
  )))
}

async function prepareVuetifySSRTemplates(
  vuetifyDir: string,
  ctx: VuetifyNuxtContext,
) {
  if (!ctx.ssrClientHints.enabled) {
    return
  }

  const files = [
    resolve(vuetifyDir, 'temp-vuetify-ssr.js'),
    resolve(vuetifyDir, 'temp-vuetify-ssr.d.ts'),
  ]
  const [js, dts] = await Promise.all(files.map(file => fsPromises.readFile(
    file,
    { encoding: 'utf-8' },
  )))

  addTypeTemplate({
    filename: 'vuetify/ssr-client-hints-configuration.d.ts',
    write: true,
    getContents: () => dts!.replace('//#region vuetify/temp-vuetify-rules.d.ts', '').replace('//#endregion', ''),
  }, { shared: true })
  addTemplate({
    filename: 'vuetify/ssr-client-hints-configuration.mjs',
    write: true,
    getContents: () => js!.replace('//#region vuetify/temp-vuetify-rules.ts', '').replace('//#endregion', ''),
  })

  files.push(resolve(vuetifyDir, 'temp-vuetify-ssr.ts'))

  await Promise.all(files.map(file => fsPromises.rm(
    file,
    { force: true },
  )))
}

async function prepareVuetifyRulesTemplates(
  vuetifyDir: string,
  ctx: VuetifyNuxtContext,
) {
  if (!ctx.enableRules) {
    return
  }

  const files = [
    resolve(vuetifyDir, 'temp-vuetify-rules.js'),
    resolve(vuetifyDir, 'temp-vuetify-rules.d.ts'),
  ]
  const [js, dts] = await Promise.all(files.map(file => fsPromises.readFile(
    file,
    { encoding: 'utf-8' },
  )))

  addTypeTemplate({
    filename: `vuetify/rules-configuration.d.ts`,
    write: true,
    getContents: () => dts!.replace('//#region vuetify/temp-vuetify-ssr.d.ts', '').replace('//#endregion', ''),
  })
  addTemplate({
    filename: 'vuetify/rules-configuration.mjs',
    write: true,
    getContents: () => js!.replace('//#region vuetify/temp-vuetify-ssr.ts', '').replace('//#endregion', ''),
  })

  files.push(resolve(vuetifyDir, 'temp-vuetify-rules.ts'))

  await Promise.all(files.map(file => fsPromises.rm(
    file,
    { force: true },
  )))
}

async function generateTempVuetifyOptions(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  await fsPromises.writeFile(
    path,
    `${ctx.configurationImports}

const vuetifyOptions = ${generateCode(ctx.vuetifyOptions).code} as const
export function vuetifyConfiguration() {
  return vuetifyOptions
}
`, { encoding: 'utf-8' },
  )
}

async function generateTempVuetifyRules(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  if (!ctx.enableRules) {
    return
  }

  await fsPromises.writeFile(
    path,
    `${ctx.rulesConfiguration.imports}
const rulesOptions = ${generateCode(ctx.rulesConfiguration.rulesOptions).code} as const
export { rulesOptions }
`, { encoding: 'utf-8' },
  )
/*
  const fromLabs = ctx.rulesConfiguration.fromLabs

  await fsPromises.writeFile(
    path,
    `${ctx.rulesConfiguration.imports}
const rulesOptions = ${generateCode(ctx.rulesConfiguration.rulesOptions).code} satisfies import('vuetify/${fromLabs ? 'labs/' : ''}rules').RulesOptions
export { rulesOptions }
`, { encoding: 'utf-8' },
  )
*/
}

async function generateTempVuetifySSR(
  path: string,
  ctx: VuetifyNuxtContext,
) {
  if (!ctx.ssrClientHints.enabled) {
    return
  }

  await fsPromises.writeFile(
    path,
    `${SSRClientHintsConfigurationDefinition}
export const ssrClientHintsConfiguration = ${JSON.stringify(buildVuetifyClientHintsConfiguration(ctx))} as const
`, { encoding: 'utf-8' },
  )
}
